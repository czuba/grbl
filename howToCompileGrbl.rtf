{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Consolas;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red27\green31\blue34;
\red21\green23\blue26;\red10\green77\blue204;}
\margl1440\margr1440\vieww15900\viewh7800\viewkind0
\deftab720
\pard\pardeftab720\sl440\sa320\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TBC:  Terminal method described below is most reliable method of compiling/installing grbl on Arduino Uno. 
\f1\b0\fs28 (...using Arduino IDE involves opaque library updating restart sequence that seems potentially error prone).
\fs36 \
Once you have a compiled .hex file, use {\field{\*\fldinst{HYPERLINK "https://github.com/paulkaplan/HexUploader"}}{\fldrslt HexUploader app}} to install onto your Arduino Uno. 
\fs28 (...this may require some libraries that come with the Arduino IDE software package. If it doesn't work on its own, install Arduino IDE and try again.)
\f0\b\fs36 \
\pard\pardeftab720\sl440\sa320\partightenfactor0

\f1\b0\fs26 \cf4 \cb1 \outl0\strokewidth0 ------------------\cf4 [ From:  {\field{\*\fldinst{HYPERLINK "https://github.com/gnea/grbl/wiki/Compiling-Grbl"}}{\fldrslt https://github.com/gnea/grbl/wiki/Compiling-Grbl}} ]\cf4 ------------------
\f0\b\fs36 \cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 For Mac OS X:\
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f1\i\b0\fs32 \cf2 Last updated: 2012-01-29 by chamnit. (Tested on OS X 10.7, 10.6, 10.4 and the Arduino IDE r22,v1.0)
\i0 \
This method of compiling Grbl uses the Mac OSX terminal and command line to access the Arduino IDE's compilers without having to use the Arduino IDE. This produces the same firmware as the Arduino IDE method above.\
First, you'll need to make sure you have the most up-to-date Arduino IDE version installed on your Mac. The trickiest part is setting up the environment path for the compilers included in the Arduino software. To do this, you'll need to first locate where they are. Depending on where you place your Arduino.app software, this will usually be located in 
\i /Applications/Arduino.app
\i0  for most people. The complete path is then: 
\f2\fs28 \cb5 /Applications/Arduino.app/Contents/Java/hardware/tools/avr/bin/
\f1\fs32 \cb3 \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f0\b \cf2 To add the compiler path:
\f1\b0  Open the Terminal.app in /Applications/Utilities.\
Then type: 
\f2\fs28 \cb5 nano ~/.bashrc
\f1\fs32 \cb3  to edit your shell config file.\
Now add this line at the end of the file: 
\f2\fs28 \cb5 export PATH=$PATH:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/bin/
\f1\fs32 \cb3  or whatever your path happens to be.\
Press 
\i Crtl-X
\i0  to exit and select 
\i Yes
\i0  to save the file. Now you have added the compiler path. You will need to close the current working window and re-open a new one for the path to be loaded correctly.\
NOTE: If you are having problems, you may need to add this same PATH to your .bash_profile file. The process is exactly the same, just switch out the names.\

\f0\b To compile:
\f1\b0  Once your paths are setup, all you will need to do is go to your grbl directory and type 
\f2\fs28 \cb5 make
\f1\fs32 \cb3 . (To clear all of the old compilation files from a previous build, type 
\f2\fs28 \cb5 make clean
\f1\fs32 \cb3  first.) This should call 
\i avr-gcc
\i0 , begin compiling grbl, and create a brand new firmware file called 
\i grbl.hex
\i0  that may then be flashed to your Arduino.\
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs36 \cf6 \cb1 \strokec6 \
}